# Concerns:
#   - no gpu
#   - single instance size available (pytest runners?)
#   - no parallelism for pytest
#   - no variables defined in pipeline
#   - dependency caching
#     - making sure caches don't get reused across builds
#   - pipes for deployment
#   - anchors??


# -------------------------------------------------------------------------------------
# reusable configurations
# -------------------------------------------------------------------------------------
definitions:
  caches:
    pip:
      - ~/venv/lib
      - ~/venv/bin
    data: ${BITBUCKET_CLONE_DIR}/data
    website: ${BITBUCKET_CLONE_DIR}/website.zip
  steps:
    - step: &install-dependencies
        name: Install dependencies
        caches:
          - pip
        script: 
          - mkdir -p ~/venv
          - virtualenv --python=python3 ~/venv
          - echo ". ~/venv/bin/activate" >> $BASH_ENV
          - . ~/venv/bin/activate
          - python --version
          - python -m pip install --progress-bar off --upgrade pip setuptools
          - python -m pip install --progress-bar off coverage
          - python -m pip install --progress-bar off codecov
          - python -m pip install --progress-bar off torch==1.7.1+cpu torchvision==0.8.2+cpu torchaudio==0.7.2 -f https://download.pytorch.org/whl/torch_stable.html
          - python -c 'import torch; print("Torch version:", torch.__version__)'
          - python -m torch.utils.collect_env
          - pip install -v -r requirements.txt
          - python setup.py develop
          - python -c "import nltk; nltk.download('punkt')"
    - step: &run-unit-tests 
        caches:
          - pip
          - data
        script:
          - mkdir -p "${BITBUCKET_CLONE_DIR}/test-results" "${BITBUCKET_CLONE_DIR}/data"
          - . ~/venv/bin/activate
          - coverage run pytest -m unit -v --junitxml=${BITBUCKET_CLONE_DIR}/test-results/junit.xml
          - python -m codecov --flags $BITBUCKET_REPO_SLUG
    - step: &run-teacher-tests
        caches:
          - pip
          - data
        script:
          - mkdir -p "${BITBUCKET_CLONE_DIR}/test-results" "${BITBUCKET_CLONE_DIR}/data"
          - . ~/venv/bin/activate
          - coverage run pytest -m teacher -v --junitxml=${BITBUCKET_CLONE_DIR}/test-results/junit.xml
          - python -m codecov --flags $BITBUCKET_REPO_SLUG
    - step: &run-crowdsourcing-tests
        caches:
          - pip
          - data
        script:
          - mkdir -p "${BITBUCKET_CLONE_DIR}/test-results" "${BITBUCKET_CLONE_DIR}/data"
          - . ~/venv/bin/activate
          - coverage run pytest -m teacher -v --junitxml=${BITBUCKET_CLONE_DIR}/test-results/junit.xml
          - python -m codecov --flags $BITBUCKET_REPO_SLUG
    - step: &install-dependencies-py37
        <<: *install-dependencies
        image: circleci/python:3.7.5-buster-node
    - step: &install-dependencies-py38
        <<: *install-dependencies
        image: circleci/python:3.8.0-buster-node
    - step: &run-unit-tests-py37
        <<: *run-unit-tests
        image: circleci/python:3.7.5-buster-node
    - step: &run-unit-tests-py38
        <<: *run-unit-tests
        image: circleci/python:3.8.0-buster-node
    - step: &install-crowdsourcing-dependencies
        image: circleci/python:3.7.5-buster-node
        caches:
          - pip
        script:
          - . ~/venv/bin/activate
          - cd ..
          - git clone git@github.com:facebookresearch/Mephisto.git Mephisto
          - cd Mephisto; git checkout v0.3.4 -b stable
          - pip install -r requirements.txt
          - python setup.py develop
          - echo | mephisto check # `echo` so that ENTER will be pressed at the prompt
    - step: &build-website
      image: circleci/python:3.7.5-buster-node
      script:
        - cd website
        - make
        - cd build
        - zip -r ${BITBUCKET_CLONE_DIR}/website.zip *
        - sudo apt-get update -yq
        - sudo apt-get install -yq linkchecker
        - python -m http.server --directory website/build >/dev/null &
        - linkchecker http://localhost:8000/
        - kill %1
      artifacts:
        - website.zip
    - step: &deploy-website
      image: circleci/python:3.7.5-buster-node
      caches:
        - pip
      script:
        - . ~/venv/bin/activate
        - pip install s3cmd
        - mkdir /tmp/website
        - unzip -d /tmp/website website.zip
        - pipe: atlassian/aws-s3-deploy:0.3.8
          variables:
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
            AWS_DEFAULT_REGION: 'us-east-1'
            S3_BUCKET: 'parl.ai'
            LOCAL_PATH: '/tmp/website'
            ACL: 'public-read'
        - s3cmd --access_key="${AWS_ACCESS_KEY_ID}" --secret_key="${AWS_SECRET_ACCESS_KEY}" modify --add-header="Content-type:text/css" 's3://parl.ai/static/css/*' 's3://parl.ai/docs/_static/*.css' 's3://parl.ai/docs/_static/css/*.css'
      

# -------------------------------------------------------------------------------------
# Actual jobs
# -------------------------------------------------------------------------------------
pipelines:
  pull-requests:
    - step: *install-dependencies-py37
    - step: *run-unit-tests-py37 # Parallelism
    - step: *run-teacher-tests
    - step: *install-crowdsourcing-dependencies
    - step: *run-crowdsourcing-tests
    - step: *install-dependencies-py38
    - step: *run-unit-tests-py38
    - step: *build-website
  branches:
    staging:
      - step: *install-dependencies-py37
      - step: *build-website
    master:
      - step: *install-dependencies-py37
      - step: *build-website
      - step: *deploy-website
      - step:
          name: Test the website
          script: |
            echo 'Testing root page:'
            curl -f -i 'https://parl.ai/'
            echo
            echo 'Testing root css:'
            curl -f -i 'https://parl.ai/static/css/parlai.css'
            echo
            echo 'Testing docs page'
            curl -f -i 'https://parl.ai/docs/'
            echo
            echo 'Testing docs css'
            curl -f -i 'https://parl.ai/docs/_static/css/parlai_theme.css'